// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: media.capnp

#ifndef CAPNP_INCLUDED_fe6ad24674c171e2_
#define CAPNP_INCLUDED_fe6ad24674c171e2_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9a17b11a5fc0f3d9);
enum class Size_9a17b11a5fc0f3d9: uint16_t {
  SMALL,
  LARGE,
};
CAPNP_DECLARE_ENUM(Size, 9a17b11a5fc0f3d9);
CAPNP_DECLARE_SCHEMA(ed1f00f4e85f5f87);
enum class Player_ed1f00f4e85f5f87: uint16_t {
  JAVA,
  FLASH,
};
CAPNP_DECLARE_ENUM(Player, ed1f00f4e85f5f87);
CAPNP_DECLARE_SCHEMA(cedf28461e4ef9a5);
CAPNP_DECLARE_SCHEMA(b12b3ef0f743092b);
CAPNP_DECLARE_SCHEMA(889de80faeaa33ce);
CAPNP_DECLARE_SCHEMA(a4b3a400dc64471c);

}  // namespace schemas
}  // namespace capnp

namespace capnp_test {

typedef ::capnp::schemas::Size_9a17b11a5fc0f3d9 Size;

typedef ::capnp::schemas::Player_ed1f00f4e85f5f87 Player;

struct Pod {
  Pod() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cedf28461e4ef9a5, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Image {
  Image() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b12b3ef0f743092b, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Media {
  Media() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(889de80faeaa33ce, 4, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MediaContent {
  MediaContent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4b3a400dc64471c, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Pod::Reader {
public:
  typedef Pod Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline bool hasPod() const;
  inline  ::capnp_test::Pod::Reader getPod() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pod::Builder {
public:
  typedef Pod Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline bool hasPod();
  inline  ::capnp_test::Pod::Builder getPod();
  inline void setPod( ::capnp_test::Pod::Reader value);
  inline  ::capnp_test::Pod::Builder initPod();
  inline void adoptPod(::capnp::Orphan< ::capnp_test::Pod>&& value);
  inline ::capnp::Orphan< ::capnp_test::Pod> disownPod();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pod::Pipeline {
public:
  typedef Pod Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp_test::Pod::Pipeline getPod();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Image::Reader {
public:
  typedef Image Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline  ::capnp::Text::Reader getUri() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline  ::int32_t getWidth() const;

  inline  ::int32_t getHeight() const;

  inline  ::capnp_test::Size getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Image::Builder {
public:
  typedef Image Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline  ::capnp::Text::Builder getUri();
  inline void setUri( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUri();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline  ::int32_t getWidth();
  inline void setWidth( ::int32_t value);

  inline  ::int32_t getHeight();
  inline void setHeight( ::int32_t value);

  inline  ::capnp_test::Size getSize();
  inline void setSize( ::capnp_test::Size value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Image::Pipeline {
public:
  typedef Image Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Media::Reader {
public:
  typedef Media Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline  ::capnp::Text::Reader getUri() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline  ::int32_t getWidth() const;

  inline  ::int32_t getHeight() const;

  inline bool hasFormat() const;
  inline  ::capnp::Text::Reader getFormat() const;

  inline  ::int64_t getDuration() const;

  inline  ::int64_t getSize() const;

  inline  ::int32_t getBitrate() const;

  inline bool hasPerson() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getPerson() const;

  inline  ::capnp_test::Player getPlayer() const;

  inline bool hasCopyright() const;
  inline  ::capnp::Text::Reader getCopyright() const;

  inline bool hasPods() const;
  inline  ::capnp::List< ::capnp_test::Pod>::Reader getPods() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Media::Builder {
public:
  typedef Media Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline  ::capnp::Text::Builder getUri();
  inline void setUri( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUri();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline  ::int32_t getWidth();
  inline void setWidth( ::int32_t value);

  inline  ::int32_t getHeight();
  inline void setHeight( ::int32_t value);

  inline bool hasFormat();
  inline  ::capnp::Text::Builder getFormat();
  inline void setFormat( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFormat(unsigned int size);
  inline void adoptFormat(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFormat();

  inline  ::int64_t getDuration();
  inline void setDuration( ::int64_t value);

  inline  ::int64_t getSize();
  inline void setSize( ::int64_t value);

  inline  ::int32_t getBitrate();
  inline void setBitrate( ::int32_t value);

  inline bool hasPerson();
  inline  ::capnp::List< ::capnp::Text>::Builder getPerson();
  inline void setPerson( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setPerson(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initPerson(unsigned int size);
  inline void adoptPerson(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownPerson();

  inline  ::capnp_test::Player getPlayer();
  inline void setPlayer( ::capnp_test::Player value);

  inline bool hasCopyright();
  inline  ::capnp::Text::Builder getCopyright();
  inline void setCopyright( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCopyright(unsigned int size);
  inline void adoptCopyright(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCopyright();

  inline bool hasPods();
  inline  ::capnp::List< ::capnp_test::Pod>::Builder getPods();
  inline void setPods( ::capnp::List< ::capnp_test::Pod>::Reader value);
  inline  ::capnp::List< ::capnp_test::Pod>::Builder initPods(unsigned int size);
  inline void adoptPods(::capnp::Orphan< ::capnp::List< ::capnp_test::Pod>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp_test::Pod>> disownPods();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Media::Pipeline {
public:
  typedef Media Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MediaContent::Reader {
public:
  typedef MediaContent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasImage() const;
  inline  ::capnp::List< ::capnp_test::Image>::Reader getImage() const;

  inline bool hasMedia() const;
  inline  ::capnp_test::Media::Reader getMedia() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MediaContent::Builder {
public:
  typedef MediaContent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasImage();
  inline  ::capnp::List< ::capnp_test::Image>::Builder getImage();
  inline void setImage( ::capnp::List< ::capnp_test::Image>::Reader value);
  inline  ::capnp::List< ::capnp_test::Image>::Builder initImage(unsigned int size);
  inline void adoptImage(::capnp::Orphan< ::capnp::List< ::capnp_test::Image>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp_test::Image>> disownImage();

  inline bool hasMedia();
  inline  ::capnp_test::Media::Builder getMedia();
  inline void setMedia( ::capnp_test::Media::Reader value);
  inline  ::capnp_test::Media::Builder initMedia();
  inline void adoptMedia(::capnp::Orphan< ::capnp_test::Media>&& value);
  inline ::capnp::Orphan< ::capnp_test::Media> disownMedia();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MediaContent::Pipeline {
public:
  typedef MediaContent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp_test::Media::Pipeline getMedia();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Pod::Reader::hasMessage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Pod::Builder::hasMessage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Pod::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Pod::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Pod::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Pod::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Pod::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Pod::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Pod::Reader::hasPod() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Pod::Builder::hasPod() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp_test::Pod::Reader Pod::Reader::getPod() const {
  return ::capnp::_::PointerHelpers< ::capnp_test::Pod>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp_test::Pod::Builder Pod::Builder::getPod() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Pod>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp_test::Pod::Pipeline Pod::Pipeline::getPod() {
  return  ::capnp_test::Pod::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Pod::Builder::setPod( ::capnp_test::Pod::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp_test::Pod>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp_test::Pod::Builder Pod::Builder::initPod() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Pod>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Pod::Builder::adoptPod(
    ::capnp::Orphan< ::capnp_test::Pod>&& value) {
  ::capnp::_::PointerHelpers< ::capnp_test::Pod>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp_test::Pod> Pod::Builder::disownPod() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Pod>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Image::Reader::hasUri() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasUri() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::Reader::getUri() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::Builder::getUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Image::Builder::setUri( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptUri(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::Builder::disownUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Image::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Image::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Image::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Image::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Image::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Image::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Image::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Image::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t Image::Reader::getWidth() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Image::Builder::getWidth() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Image::Builder::setWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Image::Reader::getHeight() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Image::Builder::getHeight() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Image::Builder::setHeight( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::capnp_test::Size Image::Reader::getSize() const {
  return _reader.getDataField< ::capnp_test::Size>(
      4 * ::capnp::ELEMENTS);
}

inline  ::capnp_test::Size Image::Builder::getSize() {
  return _builder.getDataField< ::capnp_test::Size>(
      4 * ::capnp::ELEMENTS);
}
inline void Image::Builder::setSize( ::capnp_test::Size value) {
  _builder.setDataField< ::capnp_test::Size>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool Media::Reader::hasUri() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasUri() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Media::Reader::getUri() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Media::Builder::getUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Media::Builder::setUri( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Media::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptUri(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Media::Builder::disownUri() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Media::Reader::hasTitle() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasTitle() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Media::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Media::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Media::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Media::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Media::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t Media::Reader::getWidth() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Media::Builder::getWidth() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setWidth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Media::Reader::getHeight() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Media::Builder::getHeight() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setHeight( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Media::Reader::hasFormat() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasFormat() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Media::Reader::getFormat() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Media::Builder::getFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Media::Builder::setFormat( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Media::Builder::initFormat(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptFormat(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Media::Builder::disownFormat() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int64_t Media::Reader::getDuration() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t Media::Builder::getDuration() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setDuration( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int64_t Media::Reader::getSize() const {
  return _reader.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int64_t Media::Builder::getSize() {
  return _builder.getDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setSize( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Media::Reader::getBitrate() const {
  return _reader.getDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int32_t Media::Builder::getBitrate() {
  return _builder.getDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setBitrate( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline bool Media::Reader::hasPerson() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasPerson() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader Media::Reader::getPerson() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder Media::Builder::getPerson() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Media::Builder::setPerson( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Media::Builder::setPerson(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder Media::Builder::initPerson(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptPerson(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> Media::Builder::disownPerson() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::capnp_test::Player Media::Reader::getPlayer() const {
  return _reader.getDataField< ::capnp_test::Player>(
      14 * ::capnp::ELEMENTS);
}

inline  ::capnp_test::Player Media::Builder::getPlayer() {
  return _builder.getDataField< ::capnp_test::Player>(
      14 * ::capnp::ELEMENTS);
}
inline void Media::Builder::setPlayer( ::capnp_test::Player value) {
  _builder.setDataField< ::capnp_test::Player>(
      14 * ::capnp::ELEMENTS, value);
}

inline bool Media::Reader::hasCopyright() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasCopyright() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Media::Reader::getCopyright() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Media::Builder::getCopyright() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Media::Builder::setCopyright( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Media::Builder::initCopyright(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptCopyright(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Media::Builder::disownCopyright() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Media::Reader::hasPods() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Media::Builder::hasPods() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp_test::Pod>::Reader Media::Reader::getPods() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp_test::Pod>::Builder Media::Builder::getPods() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Media::Builder::setPods( ::capnp::List< ::capnp_test::Pod>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp_test::Pod>::Builder Media::Builder::initPods(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Media::Builder::adoptPods(
    ::capnp::Orphan< ::capnp::List< ::capnp_test::Pod>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp_test::Pod>> Media::Builder::disownPods() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Pod>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool MediaContent::Reader::hasImage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MediaContent::Builder::hasImage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp_test::Image>::Reader MediaContent::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp_test::Image>::Builder MediaContent::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MediaContent::Builder::setImage( ::capnp::List< ::capnp_test::Image>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp_test::Image>::Builder MediaContent::Builder::initImage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MediaContent::Builder::adoptImage(
    ::capnp::Orphan< ::capnp::List< ::capnp_test::Image>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp_test::Image>> MediaContent::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp_test::Image>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MediaContent::Reader::hasMedia() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MediaContent::Builder::hasMedia() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp_test::Media::Reader MediaContent::Reader::getMedia() const {
  return ::capnp::_::PointerHelpers< ::capnp_test::Media>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp_test::Media::Builder MediaContent::Builder::getMedia() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Media>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp_test::Media::Pipeline MediaContent::Pipeline::getMedia() {
  return  ::capnp_test::Media::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MediaContent::Builder::setMedia( ::capnp_test::Media::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp_test::Media>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp_test::Media::Builder MediaContent::Builder::initMedia() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Media>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MediaContent::Builder::adoptMedia(
    ::capnp::Orphan< ::capnp_test::Media>&& value) {
  ::capnp::_::PointerHelpers< ::capnp_test::Media>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp_test::Media> MediaContent::Builder::disownMedia() {
  return ::capnp::_::PointerHelpers< ::capnp_test::Media>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_fe6ad24674c171e2_
