/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef media_TYPES_H
#define media_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift_test {

struct Size {
  enum type {
    SMALL = 0,
    LARGE = 1
  };
};

extern const std::map<int, const char*> _Size_VALUES_TO_NAMES;

struct Player {
  enum type {
    JAVA = 0,
    FLASH = 1
  };
};

extern const std::map<int, const char*> _Player_VALUES_TO_NAMES;

class Pod;

class Image;

class Media;

class MediaContent;

typedef struct _Pod__isset {
  _Pod__isset() : message(false), pod(false) {}
  bool message :1;
  bool pod :1;
} _Pod__isset;

class Pod {
 public:

  Pod(const Pod&);
  Pod& operator=(const Pod&);
  Pod() : message() {
  }

  virtual ~Pod() throw();
  std::string message;
  Pod pod;

  _Pod__isset __isset;

  void __set_message(const std::string& val);

  void __set_pod(const Pod& val);

  bool operator == (const Pod & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (__isset.pod != rhs.__isset.pod)
      return false;
    else if (__isset.pod && !(pod == rhs.pod))
      return false;
    return true;
  }
  bool operator != (const Pod &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pod & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Pod &a, Pod &b);

inline std::ostream& operator<<(std::ostream& out, const Pod& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Image__isset {
  _Image__isset() : uri(false), title(false) {}
  bool uri :1;
  bool title :1;
} _Image__isset;

class Image {
 public:

  Image(const Image&);
  Image& operator=(const Image&);
  Image() : uri(), title(), width(0), height(0), size((Size::type)0) {
  }

  virtual ~Image() throw();
  std::string uri;
  std::string title;
  int32_t width;
  int32_t height;
  Size::type size;

  _Image__isset __isset;

  void __set_uri(const std::string& val);

  void __set_title(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_size(const Size::type val);

  bool operator == (const Image & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const Image &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Image & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Image &a, Image &b);

inline std::ostream& operator<<(std::ostream& out, const Image& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Media__isset {
  _Media__isset() : uri(false), title(false), bitrate(false), copyright(false) {}
  bool uri :1;
  bool title :1;
  bool bitrate :1;
  bool copyright :1;
} _Media__isset;

class Media {
 public:

  Media(const Media&);
  Media& operator=(const Media&);
  Media() : uri(), title(), width(0), height(0), format(), duration(0), size(0), bitrate(0), player((Player::type)0), copyright() {
  }

  virtual ~Media() throw();
  std::string uri;
  std::string title;
  int32_t width;
  int32_t height;
  std::string format;
  int64_t duration;
  int64_t size;
  int32_t bitrate;
  std::vector<std::string>  person;
  Player::type player;
  std::string copyright;
  std::vector<Pod>  pods;

  _Media__isset __isset;

  void __set_uri(const std::string& val);

  void __set_title(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_format(const std::string& val);

  void __set_duration(const int64_t val);

  void __set_size(const int64_t val);

  void __set_bitrate(const int32_t val);

  void __set_person(const std::vector<std::string> & val);

  void __set_player(const Player::type val);

  void __set_copyright(const std::string& val);

  void __set_pods(const std::vector<Pod> & val);

  bool operator == (const Media & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(format == rhs.format))
      return false;
    if (!(duration == rhs.duration))
      return false;
    if (!(size == rhs.size))
      return false;
    if (__isset.bitrate != rhs.__isset.bitrate)
      return false;
    else if (__isset.bitrate && !(bitrate == rhs.bitrate))
      return false;
    if (!(person == rhs.person))
      return false;
    if (!(player == rhs.player))
      return false;
    if (__isset.copyright != rhs.__isset.copyright)
      return false;
    else if (__isset.copyright && !(copyright == rhs.copyright))
      return false;
    if (!(pods == rhs.pods))
      return false;
    return true;
  }
  bool operator != (const Media &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Media & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Media &a, Media &b);

inline std::ostream& operator<<(std::ostream& out, const Media& obj)
{
  obj.printTo(out);
  return out;
}


class MediaContent {
 public:

  MediaContent(const MediaContent&);
  MediaContent& operator=(const MediaContent&);
  MediaContent() {
  }

  virtual ~MediaContent() throw();
  std::vector<Image>  image;
  Media media;

  void __set_image(const std::vector<Image> & val);

  void __set_media(const Media& val);

  bool operator == (const MediaContent & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    if (!(media == rhs.media))
      return false;
    return true;
  }
  bool operator != (const MediaContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MediaContent &a, MediaContent &b);

inline std::ostream& operator<<(std::ostream& out, const MediaContent& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
