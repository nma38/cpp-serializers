// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#ifndef PROTOBUF_media_2eproto__INCLUDED
#define PROTOBUF_media_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_media_2eproto();
void protobuf_AssignDesc_media_2eproto();
void protobuf_ShutdownFile_media_2eproto();

class Pod;
class Image;
class Media;
class MediaContent;

enum Image_Size {
  Image_Size_SMALL = 0,
  Image_Size_LARGE = 1
};
bool Image_Size_IsValid(int value);
const Image_Size Image_Size_Size_MIN = Image_Size_SMALL;
const Image_Size Image_Size_Size_MAX = Image_Size_LARGE;
const int Image_Size_Size_ARRAYSIZE = Image_Size_Size_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_Size_descriptor();
inline const ::std::string& Image_Size_Name(Image_Size value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_Size_descriptor(), value);
}
inline bool Image_Size_Parse(
    const ::std::string& name, Image_Size* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_Size>(
    Image_Size_descriptor(), name, value);
}
enum Media_Player {
  Media_Player_JAVA = 0,
  Media_Player_FLASH = 1
};
bool Media_Player_IsValid(int value);
const Media_Player Media_Player_Player_MIN = Media_Player_JAVA;
const Media_Player Media_Player_Player_MAX = Media_Player_FLASH;
const int Media_Player_Player_ARRAYSIZE = Media_Player_Player_MAX + 1;

const ::google::protobuf::EnumDescriptor* Media_Player_descriptor();
inline const ::std::string& Media_Player_Name(Media_Player value) {
  return ::google::protobuf::internal::NameOfEnum(
    Media_Player_descriptor(), value);
}
inline bool Media_Player_Parse(
    const ::std::string& name, Media_Player* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Media_Player>(
    Media_Player_descriptor(), name, value);
}
// ===================================================================

class Pod : public ::google::protobuf::Message {
 public:
  Pod();
  virtual ~Pod();

  Pod(const Pod& from);

  inline Pod& operator=(const Pod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pod& default_instance();

  void Swap(Pod* other);

  // implements Message ----------------------------------------------

  Pod* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pod& from);
  void MergeFrom(const Pod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .protobuf_test.Pod pod = 2;
  inline bool has_pod() const;
  inline void clear_pod();
  static const int kPodFieldNumber = 2;
  inline const ::protobuf_test::Pod& pod() const;
  inline ::protobuf_test::Pod* mutable_pod();
  inline ::protobuf_test::Pod* release_pod();
  inline void set_allocated_pod(::protobuf_test::Pod* pod);

  // @@protoc_insertion_point(class_scope:protobuf_test.Pod)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_pod();
  inline void clear_has_pod();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::protobuf_test::Pod* pod_;
  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static Pod* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Image_Size Size;
  static const Size SMALL = Image_Size_SMALL;
  static const Size LARGE = Image_Size_LARGE;
  static inline bool Size_IsValid(int value) {
    return Image_Size_IsValid(value);
  }
  static const Size Size_MIN =
    Image_Size_Size_MIN;
  static const Size Size_MAX =
    Image_Size_Size_MAX;
  static const int Size_ARRAYSIZE =
    Image_Size_Size_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Size_descriptor() {
    return Image_Size_descriptor();
  }
  static inline const ::std::string& Size_Name(Size value) {
    return Image_Size_Name(value);
  }
  static inline bool Size_Parse(const ::std::string& name,
      Size* value) {
    return Image_Size_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required .protobuf_test.Image.Size size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::protobuf_test::Image_Size size() const;
  inline void set_size(::protobuf_test::Image_Size value);

  // @@protoc_insertion_point(class_scope:protobuf_test.Image)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* title_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  int size_;
  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class Media : public ::google::protobuf::Message {
 public:
  Media();
  virtual ~Media();

  Media(const Media& from);

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Media& default_instance();

  void Swap(Media* other);

  // implements Message ----------------------------------------------

  Media* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Media& from);
  void MergeFrom(const Media& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Media_Player Player;
  static const Player JAVA = Media_Player_JAVA;
  static const Player FLASH = Media_Player_FLASH;
  static inline bool Player_IsValid(int value) {
    return Media_Player_IsValid(value);
  }
  static const Player Player_MIN =
    Media_Player_Player_MIN;
  static const Player Player_MAX =
    Media_Player_Player_MAX;
  static const int Player_ARRAYSIZE =
    Media_Player_Player_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Player_descriptor() {
    return Media_Player_descriptor();
  }
  static inline const ::std::string& Player_Name(Player value) {
    return Media_Player_Name(value);
  }
  static inline bool Player_Parse(const ::std::string& name,
      Player* value) {
    return Media_Player_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required string format = 5;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 5;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // required int64 duration = 6;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 6;
  inline ::google::protobuf::int64 duration() const;
  inline void set_duration(::google::protobuf::int64 value);

  // required int64 size = 7;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 7;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // optional int32 bitrate = 8;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitrateFieldNumber = 8;
  inline ::google::protobuf::int32 bitrate() const;
  inline void set_bitrate(::google::protobuf::int32 value);

  // repeated string person = 9;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 9;
  inline const ::std::string& person(int index) const;
  inline ::std::string* mutable_person(int index);
  inline void set_person(int index, const ::std::string& value);
  inline void set_person(int index, const char* value);
  inline void set_person(int index, const char* value, size_t size);
  inline ::std::string* add_person();
  inline void add_person(const ::std::string& value);
  inline void add_person(const char* value);
  inline void add_person(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& person() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_person();

  // required .protobuf_test.Media.Player player = 10;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 10;
  inline ::protobuf_test::Media_Player player() const;
  inline void set_player(::protobuf_test::Media_Player value);

  // optional string copyright = 11;
  inline bool has_copyright() const;
  inline void clear_copyright();
  static const int kCopyrightFieldNumber = 11;
  inline const ::std::string& copyright() const;
  inline void set_copyright(const ::std::string& value);
  inline void set_copyright(const char* value);
  inline void set_copyright(const char* value, size_t size);
  inline ::std::string* mutable_copyright();
  inline ::std::string* release_copyright();
  inline void set_allocated_copyright(::std::string* copyright);

  // repeated .protobuf_test.Pod pods = 12;
  inline int pods_size() const;
  inline void clear_pods();
  static const int kPodsFieldNumber = 12;
  inline const ::protobuf_test::Pod& pods(int index) const;
  inline ::protobuf_test::Pod* mutable_pods(int index);
  inline ::protobuf_test::Pod* add_pods();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf_test::Pod >&
      pods() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf_test::Pod >*
      mutable_pods();

  // @@protoc_insertion_point(class_scope:protobuf_test.Media)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_copyright();
  inline void clear_has_copyright();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uri_;
  ::std::string* title_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::std::string* format_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> person_;
  ::google::protobuf::int32 bitrate_;
  int player_;
  ::std::string* copyright_;
  ::google::protobuf::RepeatedPtrField< ::protobuf_test::Pod > pods_;
  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static Media* default_instance_;
};
// -------------------------------------------------------------------

class MediaContent : public ::google::protobuf::Message {
 public:
  MediaContent();
  virtual ~MediaContent();

  MediaContent(const MediaContent& from);

  inline MediaContent& operator=(const MediaContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaContent& default_instance();

  void Swap(MediaContent* other);

  // implements Message ----------------------------------------------

  MediaContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaContent& from);
  void MergeFrom(const MediaContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf_test.Image image = 1;
  inline int image_size() const;
  inline void clear_image();
  static const int kImageFieldNumber = 1;
  inline const ::protobuf_test::Image& image(int index) const;
  inline ::protobuf_test::Image* mutable_image(int index);
  inline ::protobuf_test::Image* add_image();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf_test::Image >&
      image() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf_test::Image >*
      mutable_image();

  // required .protobuf_test.Media media = 2;
  inline bool has_media() const;
  inline void clear_media();
  static const int kMediaFieldNumber = 2;
  inline const ::protobuf_test::Media& media() const;
  inline ::protobuf_test::Media* mutable_media();
  inline ::protobuf_test::Media* release_media();
  inline void set_allocated_media(::protobuf_test::Media* media);

  // @@protoc_insertion_point(class_scope:protobuf_test.MediaContent)
 private:
  inline void set_has_media();
  inline void clear_has_media();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuf_test::Image > image_;
  ::protobuf_test::Media* media_;
  friend void  protobuf_AddDesc_media_2eproto();
  friend void protobuf_AssignDesc_media_2eproto();
  friend void protobuf_ShutdownFile_media_2eproto();

  void InitAsDefaultInstance();
  static MediaContent* default_instance_;
};
// ===================================================================


// ===================================================================

// Pod

// optional string message = 1;
inline bool Pod::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pod::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pod::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pod::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Pod::message() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Pod.message)
  return *message_;
}
inline void Pod::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Pod.message)
}
inline void Pod::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Pod.message)
}
inline void Pod::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Pod.message)
}
inline ::std::string* Pod::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Pod.message)
  return message_;
}
inline ::std::string* Pod::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pod::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Pod.message)
}

// optional .protobuf_test.Pod pod = 2;
inline bool Pod::has_pod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pod::set_has_pod() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pod::clear_has_pod() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pod::clear_pod() {
  if (pod_ != NULL) pod_->::protobuf_test::Pod::Clear();
  clear_has_pod();
}
inline const ::protobuf_test::Pod& Pod::pod() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Pod.pod)
  return pod_ != NULL ? *pod_ : *default_instance_->pod_;
}
inline ::protobuf_test::Pod* Pod::mutable_pod() {
  set_has_pod();
  if (pod_ == NULL) pod_ = new ::protobuf_test::Pod;
  // @@protoc_insertion_point(field_mutable:protobuf_test.Pod.pod)
  return pod_;
}
inline ::protobuf_test::Pod* Pod::release_pod() {
  clear_has_pod();
  ::protobuf_test::Pod* temp = pod_;
  pod_ = NULL;
  return temp;
}
inline void Pod::set_allocated_pod(::protobuf_test::Pod* pod) {
  delete pod_;
  pod_ = pod;
  if (pod) {
    set_has_pod();
  } else {
    clear_has_pod();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Pod.pod)
}

// -------------------------------------------------------------------

// Image

// required string uri = 1;
inline bool Image::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Image.uri)
  return *uri_;
}
inline void Image::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Image.uri)
}
inline void Image::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Image.uri)
}
inline void Image::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Image.uri)
}
inline ::std::string* Image::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Image.uri)
  return uri_;
}
inline ::std::string* Image::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Image::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Image.uri)
}

// optional string title = 2;
inline bool Image::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Image::title() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Image.title)
  return *title_;
}
inline void Image::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Image.title)
}
inline void Image::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Image.title)
}
inline void Image::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Image.title)
}
inline ::std::string* Image::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Image.title)
  return title_;
}
inline ::std::string* Image::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Image::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Image.title)
}

// required int32 width = 3;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Image.width)
}

// required int32 height = 4;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Image.height)
}

// required .protobuf_test.Image.Size size = 5;
inline bool Image::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::protobuf_test::Image_Size Image::size() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Image.size)
  return static_cast< ::protobuf_test::Image_Size >(size_);
}
inline void Image::set_size(::protobuf_test::Image_Size value) {
  assert(::protobuf_test::Image_Size_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Image.size)
}

// -------------------------------------------------------------------

// Media

// required string uri = 1;
inline bool Media::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Media::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Media::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Media::clear_uri() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& Media::uri() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.uri)
  return *uri_;
}
inline void Media::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Media.uri)
}
inline void Media::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Media.uri)
}
inline void Media::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Media.uri)
}
inline ::std::string* Media::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.uri)
  return uri_;
}
inline ::std::string* Media::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Media::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Media.uri)
}

// optional string title = 2;
inline bool Media::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Media::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Media::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Media::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Media::title() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.title)
  return *title_;
}
inline void Media::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Media.title)
}
inline void Media::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Media.title)
}
inline void Media::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Media.title)
}
inline ::std::string* Media::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.title)
  return title_;
}
inline ::std::string* Media::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Media::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Media.title)
}

// required int32 width = 3;
inline bool Media::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Media::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Media::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Media::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Media::width() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.width)
  return width_;
}
inline void Media::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.width)
}

// required int32 height = 4;
inline bool Media::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Media::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Media::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Media::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Media::height() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.height)
  return height_;
}
inline void Media::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.height)
}

// required string format = 5;
inline bool Media::has_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Media::set_has_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Media::clear_has_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Media::clear_format() {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& Media::format() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.format)
  return *format_;
}
inline void Media::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Media.format)
}
inline void Media::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Media.format)
}
inline void Media::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Media.format)
}
inline ::std::string* Media::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.format)
  return format_;
}
inline ::std::string* Media::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Media::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Media.format)
}

// required int64 duration = 6;
inline bool Media::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Media::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Media::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Media::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 Media::duration() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.duration)
  return duration_;
}
inline void Media::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.duration)
}

// required int64 size = 7;
inline bool Media::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Media::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Media::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Media::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 Media::size() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.size)
  return size_;
}
inline void Media::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.size)
}

// optional int32 bitrate = 8;
inline bool Media::has_bitrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Media::set_has_bitrate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Media::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Media::clear_bitrate() {
  bitrate_ = 0;
  clear_has_bitrate();
}
inline ::google::protobuf::int32 Media::bitrate() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.bitrate)
  return bitrate_;
}
inline void Media::set_bitrate(::google::protobuf::int32 value) {
  set_has_bitrate();
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.bitrate)
}

// repeated string person = 9;
inline int Media::person_size() const {
  return person_.size();
}
inline void Media::clear_person() {
  person_.Clear();
}
inline const ::std::string& Media::person(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.person)
  return person_.Get(index);
}
inline ::std::string* Media::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.person)
  return person_.Mutable(index);
}
inline void Media::set_person(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_test.Media.person)
  person_.Mutable(index)->assign(value);
}
inline void Media::set_person(int index, const char* value) {
  person_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Media.person)
}
inline void Media::set_person(int index, const char* value, size_t size) {
  person_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Media.person)
}
inline ::std::string* Media::add_person() {
  return person_.Add();
}
inline void Media::add_person(const ::std::string& value) {
  person_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Media.person)
}
inline void Media::add_person(const char* value) {
  person_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test.Media.person)
}
inline void Media::add_person(const char* value, size_t size) {
  person_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test.Media.person)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Media::person() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Media.person)
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Media::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Media.person)
  return &person_;
}

// required .protobuf_test.Media.Player player = 10;
inline bool Media::has_player() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Media::set_has_player() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Media::clear_has_player() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Media::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::protobuf_test::Media_Player Media::player() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.player)
  return static_cast< ::protobuf_test::Media_Player >(player_);
}
inline void Media::set_player(::protobuf_test::Media_Player value) {
  assert(::protobuf_test::Media_Player_IsValid(value));
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:protobuf_test.Media.player)
}

// optional string copyright = 11;
inline bool Media::has_copyright() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Media::set_has_copyright() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Media::clear_has_copyright() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Media::clear_copyright() {
  if (copyright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copyright_->clear();
  }
  clear_has_copyright();
}
inline const ::std::string& Media::copyright() const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.copyright)
  return *copyright_;
}
inline void Media::set_copyright(const ::std::string& value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Media.copyright)
}
inline void Media::set_copyright(const char* value) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Media.copyright)
}
inline void Media::set_copyright(const char* value, size_t size) {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copyright_ = new ::std::string;
  }
  copyright_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Media.copyright)
}
inline ::std::string* Media::mutable_copyright() {
  set_has_copyright();
  if (copyright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    copyright_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.copyright)
  return copyright_;
}
inline ::std::string* Media::release_copyright() {
  clear_has_copyright();
  if (copyright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = copyright_;
    copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Media::set_allocated_copyright(::std::string* copyright) {
  if (copyright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete copyright_;
  }
  if (copyright) {
    set_has_copyright();
    copyright_ = copyright;
  } else {
    clear_has_copyright();
    copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.Media.copyright)
}

// repeated .protobuf_test.Pod pods = 12;
inline int Media::pods_size() const {
  return pods_.size();
}
inline void Media::clear_pods() {
  pods_.Clear();
}
inline const ::protobuf_test::Pod& Media::pods(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Media.pods)
  return pods_.Get(index);
}
inline ::protobuf_test::Pod* Media::mutable_pods(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Media.pods)
  return pods_.Mutable(index);
}
inline ::protobuf_test::Pod* Media::add_pods() {
  // @@protoc_insertion_point(field_add:protobuf_test.Media.pods)
  return pods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_test::Pod >&
Media::pods() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Media.pods)
  return pods_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_test::Pod >*
Media::mutable_pods() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Media.pods)
  return &pods_;
}

// -------------------------------------------------------------------

// MediaContent

// repeated .protobuf_test.Image image = 1;
inline int MediaContent::image_size() const {
  return image_.size();
}
inline void MediaContent::clear_image() {
  image_.Clear();
}
inline const ::protobuf_test::Image& MediaContent::image(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.MediaContent.image)
  return image_.Get(index);
}
inline ::protobuf_test::Image* MediaContent::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.MediaContent.image)
  return image_.Mutable(index);
}
inline ::protobuf_test::Image* MediaContent::add_image() {
  // @@protoc_insertion_point(field_add:protobuf_test.MediaContent.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_test::Image >&
MediaContent::image() const {
  // @@protoc_insertion_point(field_list:protobuf_test.MediaContent.image)
  return image_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_test::Image >*
MediaContent::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.MediaContent.image)
  return &image_;
}

// required .protobuf_test.Media media = 2;
inline bool MediaContent::has_media() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaContent::set_has_media() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaContent::clear_has_media() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaContent::clear_media() {
  if (media_ != NULL) media_->::protobuf_test::Media::Clear();
  clear_has_media();
}
inline const ::protobuf_test::Media& MediaContent::media() const {
  // @@protoc_insertion_point(field_get:protobuf_test.MediaContent.media)
  return media_ != NULL ? *media_ : *default_instance_->media_;
}
inline ::protobuf_test::Media* MediaContent::mutable_media() {
  set_has_media();
  if (media_ == NULL) media_ = new ::protobuf_test::Media;
  // @@protoc_insertion_point(field_mutable:protobuf_test.MediaContent.media)
  return media_;
}
inline ::protobuf_test::Media* MediaContent::release_media() {
  clear_has_media();
  ::protobuf_test::Media* temp = media_;
  media_ = NULL;
  return temp;
}
inline void MediaContent::set_allocated_media(::protobuf_test::Media* media) {
  delete media_;
  media_ = media;
  if (media) {
    set_has_media();
  } else {
    clear_has_media();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test.MediaContent.media)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_test

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobuf_test::Image_Size> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_test::Image_Size>() {
  return ::protobuf_test::Image_Size_descriptor();
}
template <> struct is_proto_enum< ::protobuf_test::Media_Player> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_test::Media_Player>() {
  return ::protobuf_test::Media_Player_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_media_2eproto__INCLUDED
