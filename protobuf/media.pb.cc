// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test {

namespace {

const ::google::protobuf::Descriptor* Pod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pod_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Image_Size_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Media_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Media_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Media_Player_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MediaContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaContent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_media_2eproto() {
  protobuf_AddDesc_media_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "media.proto");
  GOOGLE_CHECK(file != NULL);
  Pod_descriptor_ = file->message_type(0);
  static const int Pod_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pod, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pod, pod_),
  };
  Pod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pod_descriptor_,
      Pod::default_instance_,
      Pod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pod));
  Image_descriptor_ = file->message_type(1);
  static const int Image_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, size_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_Size_descriptor_ = Image_descriptor_->enum_type(0);
  Media_descriptor_ = file->message_type(2);
  static const int Media_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, person_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, copyright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, pods_),
  };
  Media_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Media_descriptor_,
      Media::default_instance_,
      Media_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Media));
  Media_Player_descriptor_ = Media_descriptor_->enum_type(0);
  MediaContent_descriptor_ = file->message_type(3);
  static const int MediaContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContent, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContent, media_),
  };
  MediaContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaContent_descriptor_,
      MediaContent::default_instance_,
      MediaContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaContent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_media_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pod_descriptor_, &Pod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Media_descriptor_, &Media::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaContent_descriptor_, &MediaContent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_media_2eproto() {
  delete Pod::default_instance_;
  delete Pod_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Media::default_instance_;
  delete Media_reflection_;
  delete MediaContent::default_instance_;
  delete MediaContent_reflection_;
}

void protobuf_AddDesc_media_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013media.proto\022\rprotobuf_test\"7\n\003Pod\022\017\n\007m"
    "essage\030\001 \001(\t\022\037\n\003pod\030\002 \001(\0132\022.protobuf_tes"
    "t.Pod\"\211\001\n\005Image\022\013\n\003uri\030\001 \002(\t\022\r\n\005title\030\002 "
    "\001(\t\022\r\n\005width\030\003 \002(\005\022\016\n\006height\030\004 \002(\005\022\'\n\004si"
    "ze\030\005 \002(\0162\031.protobuf_test.Image.Size\"\034\n\004S"
    "ize\022\t\n\005SMALL\020\000\022\t\n\005LARGE\020\001\"\224\002\n\005Media\022\013\n\003u"
    "ri\030\001 \002(\t\022\r\n\005title\030\002 \001(\t\022\r\n\005width\030\003 \002(\005\022\016"
    "\n\006height\030\004 \002(\005\022\016\n\006format\030\005 \002(\t\022\020\n\010durati"
    "on\030\006 \002(\003\022\014\n\004size\030\007 \002(\003\022\017\n\007bitrate\030\010 \001(\005\022"
    "\016\n\006person\030\t \003(\t\022+\n\006player\030\n \002(\0162\033.protob"
    "uf_test.Media.Player\022\021\n\tcopyright\030\013 \001(\t\022"
    " \n\004pods\030\014 \003(\0132\022.protobuf_test.Pod\"\035\n\006Pla"
    "yer\022\010\n\004JAVA\020\000\022\t\n\005FLASH\020\001\"X\n\014MediaContent"
    "\022#\n\005image\030\001 \003(\0132\024.protobuf_test.Image\022#\n"
    "\005media\030\002 \002(\0132\024.protobuf_test.MediaB\002H\001", 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media.proto", &protobuf_RegisterTypes);
  Pod::default_instance_ = new Pod();
  Image::default_instance_ = new Image();
  Media::default_instance_ = new Media();
  MediaContent::default_instance_ = new MediaContent();
  Pod::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Media::default_instance_->InitAsDefaultInstance();
  MediaContent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_media_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_media_2eproto {
  StaticDescriptorInitializer_media_2eproto() {
    protobuf_AddDesc_media_2eproto();
  }
} static_descriptor_initializer_media_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Pod::kMessageFieldNumber;
const int Pod::kPodFieldNumber;
#endif  // !_MSC_VER

Pod::Pod()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Pod)
}

void Pod::InitAsDefaultInstance() {
  pod_ = const_cast< ::protobuf_test::Pod*>(&::protobuf_test::Pod::default_instance());
}

Pod::Pod(const Pod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Pod)
}

void Pod::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pod::~Pod() {
  // @@protoc_insertion_point(destructor:protobuf_test.Pod)
  SharedDtor();
}

void Pod::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete pod_;
  }
}

void Pod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pod_descriptor_;
}

const Pod& Pod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

Pod* Pod::default_instance_ = NULL;

Pod* Pod::New() const {
  return new Pod;
}

void Pod::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_pod()) {
      if (pod_ != NULL) pod_->::protobuf_test::Pod::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Pod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pod;
        break;
      }

      // optional .protobuf_test.Pod pod = 2;
      case 2: {
        if (tag == 18) {
         parse_pod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pod()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Pod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Pod)
  return false;
#undef DO_
}

void Pod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Pod)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .protobuf_test.Pod pod = 2;
  if (has_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_test.Pod)
}

::google::protobuf::uint8* Pod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Pod)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .protobuf_test.Pod pod = 2;
  if (has_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Pod)
  return target;
}

int Pod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .protobuf_test.Pod pod = 2;
    if (has_pod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pod::MergeFrom(const Pod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_pod()) {
      mutable_pod()->::protobuf_test::Pod::MergeFrom(from.pod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pod::CopyFrom(const Pod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pod::IsInitialized() const {

  return true;
}

void Pod::Swap(Pod* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(pod_, other->pod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pod_descriptor_;
  metadata.reflection = Pod_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Image_Size_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Size_descriptor_;
}
bool Image_Size_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Image_Size Image::SMALL;
const Image_Size Image::LARGE;
const Image_Size Image::Size_MIN;
const Image_Size Image::Size_MAX;
const int Image::Size_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Image::kUriFieldNumber;
const int Image::kTitleFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kSizeFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Image)
}

void Image::InitAsDefaultInstance() {
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Image)
}

void Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:protobuf_test.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Image*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(width_, size_);
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // required int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // required .protobuf_test.Image.Size size = 5;
      case 5: {
        if (tag == 40) {
         parse_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_test::Image_Size_IsValid(value)) {
            set_size(static_cast< ::protobuf_test::Image_Size >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Image)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // required .protobuf_test.Image.Size size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_test.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Image)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // required .protobuf_test.Image.Size size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Image)
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required .protobuf_test.Image.Size size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(title_, other->title_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Media_Player_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Media_Player_descriptor_;
}
bool Media_Player_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Media_Player Media::JAVA;
const Media_Player Media::FLASH;
const Media_Player Media::Player_MIN;
const Media_Player Media::Player_MAX;
const int Media::Player_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Media::kUriFieldNumber;
const int Media::kTitleFieldNumber;
const int Media::kWidthFieldNumber;
const int Media::kHeightFieldNumber;
const int Media::kFormatFieldNumber;
const int Media::kDurationFieldNumber;
const int Media::kSizeFieldNumber;
const int Media::kBitrateFieldNumber;
const int Media::kPersonFieldNumber;
const int Media::kPlayerFieldNumber;
const int Media::kCopyrightFieldNumber;
const int Media::kPodsFieldNumber;
#endif  // !_MSC_VER

Media::Media()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Media)
}

void Media::InitAsDefaultInstance() {
}

Media::Media(const Media& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Media)
}

void Media::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = GOOGLE_LONGLONG(0);
  size_ = GOOGLE_LONGLONG(0);
  bitrate_ = 0;
  player_ = 0;
  copyright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:protobuf_test.Media)
  SharedDtor();
}

void Media::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete format_;
  }
  if (copyright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete copyright_;
  }
  if (this != default_instance_) {
  }
}

void Media::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Media::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Media_descriptor_;
}

const Media& Media::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

Media* Media::default_instance_ = NULL;

Media* Media::New() const {
  return new Media;
}

void Media::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Media*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(width_, height_);
    ZR_(duration_, size_);
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        format_->clear();
      }
    }
    bitrate_ = 0;
  }
  if (_has_bits_[8 / 32] & 1536) {
    player_ = 0;
    if (has_copyright()) {
      if (copyright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        copyright_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  person_.Clear();
  pods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Media)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // required int32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_format;
        break;
      }

      // required string format = 5;
      case 5: {
        if (tag == 42) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_duration;
        break;
      }

      // required int64 duration = 6;
      case 6: {
        if (tag == 48) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_size;
        break;
      }

      // required int64 size = 7;
      case 7: {
        if (tag == 56) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bitrate;
        break;
      }

      // optional int32 bitrate = 8;
      case 8: {
        if (tag == 64) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_person;
        break;
      }

      // repeated string person = 9;
      case 9: {
        if (tag == 74) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_person()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->person(this->person_size() - 1).data(),
            this->person(this->person_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "person");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_person;
        if (input->ExpectTag(80)) goto parse_player;
        break;
      }

      // required .protobuf_test.Media.Player player = 10;
      case 10: {
        if (tag == 80) {
         parse_player:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf_test::Media_Player_IsValid(value)) {
            set_player(static_cast< ::protobuf_test::Media_Player >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_copyright;
        break;
      }

      // optional string copyright = 11;
      case 11: {
        if (tag == 90) {
         parse_copyright:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->copyright().data(), this->copyright().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "copyright");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pods;
        break;
      }

      // repeated .protobuf_test.Pod pods = 12;
      case 12: {
        if (tag == 98) {
         parse_pods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Media)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Media)
  return false;
#undef DO_
}

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Media)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // required string format = 5;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->format(), output);
  }

  // required int64 duration = 6;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->duration(), output);
  }

  // required int64 size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->size(), output);
  }

  // optional int32 bitrate = 8;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bitrate(), output);
  }

  // repeated string person = 9;
  for (int i = 0; i < this->person_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->person(i).data(), this->person(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "person");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->person(i), output);
  }

  // required .protobuf_test.Media.Player player = 10;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->player(), output);
  }

  // optional string copyright = 11;
  if (has_copyright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->copyright().data(), this->copyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "copyright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->copyright(), output);
  }

  // repeated .protobuf_test.Pod pods = 12;
  for (int i = 0; i < this->pods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_test.Media)
}

::google::protobuf::uint8* Media::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Media)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // required string format = 5;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->format(), target);
  }

  // required int64 duration = 6;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->duration(), target);
  }

  // required int64 size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->size(), target);
  }

  // optional int32 bitrate = 8;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bitrate(), target);
  }

  // repeated string person = 9;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->person(i).data(), this->person(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "person");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->person(i), target);
  }

  // required .protobuf_test.Media.Player player = 10;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->player(), target);
  }

  // optional string copyright = 11;
  if (has_copyright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->copyright().data(), this->copyright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "copyright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->copyright(), target);
  }

  // repeated .protobuf_test.Pod pods = 12;
  for (int i = 0; i < this->pods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Media)
  return target;
}

int Media::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required string format = 5;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // required int64 duration = 6;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }

    // required int64 size = 7;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size());
    }

    // optional int32 bitrate = 8;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required .protobuf_test.Media.Player player = 10;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player());
    }

    // optional string copyright = 11;
    if (has_copyright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyright());
    }

  }
  // repeated string person = 9;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->person(i));
  }

  // repeated .protobuf_test.Pod pods = 12;
  total_size += 1 * this->pods_size();
  for (int i = 0; i < this->pods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Media::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Media* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Media*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Media::MergeFrom(const Media& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  pods_.MergeFrom(from.pods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_copyright()) {
      set_copyright(from.copyright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Media::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media::CopyFrom(const Media& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027d) != 0x0000027d) return false;

  return true;
}

void Media::Swap(Media* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(title_, other->title_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(format_, other->format_);
    std::swap(duration_, other->duration_);
    std::swap(size_, other->size_);
    std::swap(bitrate_, other->bitrate_);
    person_.Swap(&other->person_);
    std::swap(player_, other->player_);
    std::swap(copyright_, other->copyright_);
    pods_.Swap(&other->pods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Media::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Media_descriptor_;
  metadata.reflection = Media_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaContent::kImageFieldNumber;
const int MediaContent::kMediaFieldNumber;
#endif  // !_MSC_VER

MediaContent::MediaContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.MediaContent)
}

void MediaContent::InitAsDefaultInstance() {
  media_ = const_cast< ::protobuf_test::Media*>(&::protobuf_test::Media::default_instance());
}

MediaContent::MediaContent(const MediaContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.MediaContent)
}

void MediaContent::SharedCtor() {
  _cached_size_ = 0;
  media_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaContent::~MediaContent() {
  // @@protoc_insertion_point(destructor:protobuf_test.MediaContent)
  SharedDtor();
}

void MediaContent::SharedDtor() {
  if (this != default_instance_) {
    delete media_;
  }
}

void MediaContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaContent_descriptor_;
}

const MediaContent& MediaContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_2eproto();
  return *default_instance_;
}

MediaContent* MediaContent::default_instance_ = NULL;

MediaContent* MediaContent::New() const {
  return new MediaContent;
}

void MediaContent::Clear() {
  if (has_media()) {
    if (media_ != NULL) media_->::protobuf_test::Media::Clear();
  }
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.MediaContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf_test.Image image = 1;
      case 1: {
        if (tag == 10) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_image;
        if (input->ExpectTag(18)) goto parse_media;
        break;
      }

      // required .protobuf_test.Media media = 2;
      case 2: {
        if (tag == 18) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.MediaContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.MediaContent)
  return false;
#undef DO_
}

void MediaContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.MediaContent)
  // repeated .protobuf_test.Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(i), output);
  }

  // required .protobuf_test.Media media = 2;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->media(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf_test.MediaContent)
}

::google::protobuf::uint8* MediaContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.MediaContent)
  // repeated .protobuf_test.Image image = 1;
  for (int i = 0; i < this->image_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(i), target);
  }

  // required .protobuf_test.Media media = 2;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->media(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.MediaContent)
  return target;
}

int MediaContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .protobuf_test.Media media = 2;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  // repeated .protobuf_test.Image image = 1;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaContent::MergeFrom(const MediaContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_media()) {
      mutable_media()->::protobuf_test::Media::MergeFrom(from.media());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaContent::CopyFrom(const MediaContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  if (has_media()) {
    if (!this->media().IsInitialized()) return false;
  }
  return true;
}

void MediaContent::Swap(MediaContent* other) {
  if (other != this) {
    image_.Swap(&other->image_);
    std::swap(media_, other->media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaContent_descriptor_;
  metadata.reflection = MediaContent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_test

// @@protoc_insertion_point(global_scope)
